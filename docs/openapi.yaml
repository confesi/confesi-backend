openapi: 3.0.2

info:
  title: Confesi server
  version: 0.1.0

servers:
  - url: http://localhost:3000/

components:
  schemas:
    masked-id:
      type: string
      minLength: 22
      maxLength: 22
      #pattern: '^[0-9A-Za-z+/]+$'
      contentEncoding: base64url
      contentMediaType: application/vnd.confesi.masked-id
    masked-sequential-id:
      type: string
      minLength: 22
      maxLength: 22
      #pattern: '^[0-9A-Za-z+/]+$'
      contentEncoding: base64url
      contentMediaType: application/vnd.confesi.masked-sequential-id
    success:
      type: object
      required:
        - error
      properties:
        error:
          type: 'null'
      example: {error: null}
    username:
      type: string
      minLength: 1
      maxLength: 32
      pattern: '^[0-9A-Za-z]+$'
      example: 'earlgrey'
    votes:
      type: 'object'
      required:
        - up
        - down
      properties:
        up:
          type: integer
          minimum: 0
        down:
          type: integer
          minimum: 0
  responses:
    unauthenticated:
      description: The authentication token is not valid (missing, malformed, fake, or expired).
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                  - Unauthenticated

    unexpected:
      description: An unexpected error occurred. (Non-JSON bodies with other response codes and unexpected data types should also be treated as this error.)
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                  - Unexpected
  securitySchemes:
    bearer:
      type: http
      scheme: bearer

security:
  - bearer: []

paths:
  /login:
    post:
      summary: Log in
      description: Authenticates with a username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  $ref: '#/components/schemas/username'
                  description: The username. Case-insensitive.
      responses:
        '200':
          description: Authentication was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '400':
          description: Authentication was unsuccessful.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    enum:
                      - UsernameNotFound
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/unexpected'

  /logout:
    post:
      responses:
        '200':
          description: The requesting session was valid, and was invalidated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/unexpected'

  /logout-all:
    post:
      responses:
        '200':
          description: All sessions belonging to the user were invalidated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/unexpected'

  /users/:
    post:
      summary: Create account
      description: Registers a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - school_id
              properties:
                username:
                  $ref: '#/components/schemas/username'
                  description: The new accountâ€™s username.
                school_id:
                  type: string
                faculty:
                  type: string
                year_of_study:
                  type: string
      responses:
        '200':
          description: The account was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '409':
          description: An error occurred creating the account.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                error:
                  type: string
                  enum:
                    - UsernameTaken
        '500':
          $ref: '#/components/responses/unexpected'

  /users/profile/:
    get:
      summary: List user profile data
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  year_of_study:
                    type: string
                  faculty:
                    type: string
                  school_id:
                    type: string
                  username:
                    type: string
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string
    put:
      summary: Update user profile data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                year_of_study:
                  type: string
                faculty:
                  type: string
                school_id:
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: null
                  value:
                    type: string
                    example: null
        '400':
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  BadRequest:
                    type: string

  /users/watched/:
    get:
      summary: Get schools a user has watched
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items:
                      type: string
                      example: university name
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string
    post:
      summary: Add to the list of schools a user has watched
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: UVIC

      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    example: null
                  error:
                    type: string
                    example: null
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string
    delete:
      summary: Delete schools from the list a user has watched
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: UVIC

      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    example: null
                  error:
                    type: string
                    example: null
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string

  /posts/{post_id}/:
    get:
      summary: Get a singular post via masked post ID.
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            id:
              type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - sequential_id
                  - reply_context
                  - text
                  - created_at
                  - votes
                properties:
                  id:
                    $ref: '#/components/schemas/masked-id'
                  sequential_id:
                    $ref: '#/components/schemas/masked-sequential-id'
                  reply_context:
                    anyOf:
                      - type: 'null'
                      - type: object
                        required:
                          - id
                        properties:
                          id:
                            $ref: '#/components/schemas/masked-id'
                  text:
                    type: string
                  created_at:
                    type: string
                  votes:
                    $ref: '#/components/schemas/votes'

  /posts/:
    get:
      summary: List posts
      parameters:
        - name: sort
          in: query
          required: true
          schema:
            type: string
            enum:
              - recent
              - trending
        - name: before
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/masked-sequential-id'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                required:
                  - value
                properties:
                  value:
                    type: 'object'
                    required:
                      - posts
                    properties:
                      posts:
                        type: array
                        items:
                          type: object
                          required:
                            - id
                            - sequential_id
                            - reply_context
                            - text
                            - created_at
                            - votes
                          properties:
                            id:
                              $ref: '#/components/schemas/masked-id'
                            sequential_id:
                              $ref: '#/components/schemas/masked-sequential-id'
                            reply_context:
                              anyOf:
                                - type: 'null'
                                - type: object
                                  required:
                                    - id
                                  properties:
                                    id:
                                      $ref: '#/components/schemas/masked-id'
                            text:
                              type: string
                            created_at:
                              type: string
                            votes:
                              $ref: '#/components/schemas/votes'

    post:
      summary: Create post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  minLength: 1
                  maxLength: 1000
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/unexpected'

  /posts/{post_id}/vote:
    put:
      summary: Vote on post
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/masked-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
              enum:
                - -1
                - 0
                - 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: 'object'
                required:
                  - value
                properties:
                  value:
                    $ref: '#/components/schemas/votes'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/unexpected'

  /schools/:
    get:
      summary: List schools along with distance to requester (based on IP address)
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                    - distance
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  distance:
                    # TODO: is description allowed here?
                    description: Distance in kilometres.
                    anyOf:
                      - type: 'null'
                      - type: number
                        minimum: 0
  /posts/{post_id}/report:
    put:
      summary: Reports a post.
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            id:
              type: string
              example: some-masked-id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
                - category
              properties:
                reason:
                  type: string
                  example: I don't like this content.
                category:
                  type: string
                  enum:
                    - spam
                    - identifying_information
                    - self_harm_or_suicide
                    - illegal
                    - discriminatory
                    - mean
                    - child_related
                    - nsfw
                    - violent
                    - false_information
                    - just_dislike_it
                    - other
      responses:
        '200':
          description: Successfully reported the post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: null
                  value:
                    type: null
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string
        '409':
          description: An error occurred while reporting the post.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    enum:
                      - AlreadyReported
                example:
                  error: AlreadyReported
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/unexpected'
  /reports/posts/:
    get:
      summary: Lists posts based on report-based criteria.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                seen:
                  type: array
                  items:
                    type: string
                min_reports:
                  type: integer
                show_removed:
                  type: boolean
              required:
                - seen
                - min_reports
                - show_removed
            example:
              seen:
                - biyKRAO0HIdU8YUqST4B5g
              min_reports: 0
              show_removed: true
      responses:
        '200':
          description: Successfully retrieved the list of posts.
          content:
            application/json:
              schema:
                type: object
                required:
                  - value
                properties:
                  value:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - sequential_id
                        - reply_context
                        - text
                        - created_at
                        - votes
                        - reports
                        - removed
                      properties:
                        id:
                          $ref: '#/components/schemas/masked-id'
                        sequential_id:
                          $ref: '#/components/schemas/masked-sequential-id'
                        reply_context:
                          anyOf:
                            - type: 'null'
                            - type: object
                              required:
                                - id
                              properties:
                                id:
                                  $ref: '#/components/schemas/masked-id'
                        text:
                          type: string
                        created_at:
                          type: string
                        votes:
                          $ref: '#/components/schemas/votes'
                        reports:
                          type: integer
                          example: 4
                        removed:
                          type: boolean
                          example: false
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string
        '500':
          $ref: '#/components/responses/unexpected'
  /reports/{post_id}/:
    get:
      summary: Lists detailed reports for a specific post.
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            id:
              type: string
              example: some-masked-id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              example: some-masked-sequential-id or null
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: null
                  value:
                    type: object
                    properties:
                      reports:
                        type: array
                        items:
                          type: object
                          properties:
                            reason:
                              type: string
                            category:
                              type: string
                      next:
                        type: string
                        example: some-masked-sequential-id
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string
        '500':
          $ref: '#/components/responses/unexpected'
  /posts/{post_id}/remove:
    put:
      summary: Updates the `removed` status of a post in the database.
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            id:
              type: string
              example: some-masked-id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
              example: true
      responses:
        '200':
          description: Successfully updated the `removed` status of the post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: null
                  value:
                    type: null
        '400':
            content:
              application/json:
                schema:
                  type: 'object'
                  properties:
                    BadRequest:
                      type: string
        '500':
          $ref: '#/components/responses/unexpected'
